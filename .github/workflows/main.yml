name: CFMP_deploy

on:
  push:
    branches: [master]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: test_cfmp_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r 后端/cfmp/requirements.txt


      - name: Run pytest
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: test_cfmp_db
          DB_USER: root
          DB_PASSWORD: rootpassword
        run: |
          cd 后端/cfmp
          python manage.py migrate
          python manage.py makemigrations
          python manage.py test  # 或者使用您的特定测试命令
          

  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment archive
        run: |
          mkdir -p deploy-temp
          cp -r * deploy-temp/ 2>/dev/null || true
          cp -r .[^.]* deploy-temp/ 2>/dev/null || true
          cd deploy-temp
          rm -rf .git
          tar -czf ../cfmp-deploy.tar.gz .
          cd ..
          rm -rf deploy-temp

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Deploy to Aliyun
        run: |
          sshpass -p ${{secrets.ECS_PASSWORD}} scp -o StrictHostKeyChecking=no cfmp-deploy.tar.gz root@${{secrets.ECS_IP}}:/tmp/
          sshpass -p ${{secrets.ECS_PASSWORD}} ssh -o StrictHostKeyChecking=no root@${{secrets.ECS_IP}} "
            mkdir -p ~/CFMP &&
            cd ~/CFMP &&
            tar -xzf /tmp/cfmp-deploy.tar.gz &&
            rm /tmp/cfmp-deploy.tar.gz &&
            docker-compose down || true &&
            docker-compose build &&
            docker-compose up -d
          "
