# Generated by Django 5.2 on 2025-05-07 05:56

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('category_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='ChatLog',
            fields=[
                ('chat_id', models.IntegerField(primary_key=True, serialize=False)),
                ('sender_id', models.IntegerField()),
                ('receiver_id', models.IntegerField()),
                ('content', models.TextField()),
                ('send_at', models.DateTimeField(auto_now_add=True)),
                ('read', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'chat_log',
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('complaint_id', models.IntegerField(primary_key=True, serialize=False)),
                ('complainer_id', models.IntegerField()),
                ('target_type', models.SmallIntegerField()),
                ('target_id', models.IntegerField()),
                ('reason', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.SmallIntegerField(default=0)),
                ('reviewer_id', models.IntegerField(default=-1)),
                ('reviewed_at', models.DateTimeField(default=None)),
                ('result', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'complaint',
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follower_id', models.IntegerField()),
                ('followee_id', models.IntegerField()),
            ],
            options={
                'db_table': 'follow',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.IntegerField(primary_key=True, serialize=False)),
                ('buyer_id', models.IntegerField()),
                ('product_id', models.IntegerField()),
                ('status', models.SmallIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('payment_method', models.SmallIntegerField(default=2)),
            ],
            options={
                'db_table': 'order',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.IntegerField(primary_key=True, serialize=False)),
                ('user_id', models.IntegerField()),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.SmallIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product_img', models.JSONField()),
            ],
            options={
                'db_table': 'product',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_id', models.IntegerField()),
                ('category_id', models.IntegerField()),
            ],
            options={
                'db_table': 'product_category',
            },
        ),
        migrations.CreateModel(
            name='TransactionLog',
            fields=[
                ('log_id', models.IntegerField(primary_key=True, serialize=False)),
                ('order_id', models.IntegerField()),
                ('event', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'transaction_log',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('user_id', models.IntegerField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=30)),
                ('password', models.CharField(max_length=64)),
                ('email', models.CharField(max_length=50)),
                ('phone', models.CharField(max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.IntegerField(default=0)),
                ('privilege', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='ViolationRecord',
            fields=[
                ('record_id', models.IntegerField(primary_key=True, serialize=False)),
                ('target_type', models.SmallIntegerField()),
                ('target_id', models.IntegerField()),
                ('action', models.CharField(max_length=100)),
                ('reason', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'violation_record',
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collection_id', models.IntegerField()),
                ('collecter_id', models.IntegerField()),
            ],
            options={
                'db_table': 'collection',
                'unique_together': {('collection_id', 'collecter_id')},
            },
        ),
    ]
